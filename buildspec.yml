version: 0.2  # Define a versão do formato do arquivo

phases:
  install:
    runtime-versions:
      nodejs: 14  # Define a versão do Node.js a ser usada
      java: corretto17  # Define a versão do Java (Amazon Corretto 17)
    commands:
      - echo "Installing NPM dependencies..."
      - npm install
      - echo "Instalando OWASP Dependency-Check..."
      - curl -sLO https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
      - yum install -y unzip || apt-get install -y unzip
      - unzip dependency-check-9.0.9-release.zip
      - echo "Verificando estrutura de diretórios após extração..."
      - ls -lah .
      - find . -type d -name "dependency-check*"  # Verifica onde o Dependency-Check foi extraído

  pre_build:
    commands:
      - echo "Pre-build phase"

  build:
    commands:
      - echo "Testando conexão manual com API da NVD usando a chave..."
      - curl -H "apiKey:$NVD_API_KEY" "https://services.nvd.nist.gov/rest/json/cves/2.0" || echo "Erro ao acessar API manualmente"

      - echo "Rodando análise de dependências no modo DEBUG..."
      - echo "API Key configurada:${NVD_API_KEY:-'NÃO CONFIGURADA'}"
      - env | grep NVD

      - mkdir -p reports
      - echo "Verificando versão do OWASP Dependency Check..."

      # Define o caminho correto para o Dependency-Check
      - export DEP_CHECK_DIR=$(find . -type d -name "dependency-check*" | head -n 1)
      - echo "Dependency-Check encontrado em: $DEP_CHECK_DIR"

      # Lista os arquivos para depuração
      - ls -lah $DEP_CHECK_DIR/bin/

      # Garantindo permissão de execução
      - chmod +x $DEP_CHECK_DIR/bin/dependency-check.sh
      - $DEP_CHECK_DIR/bin/dependency-check.sh --version

      - echo "Executando análise com logs detalhados..."
      - |
        $DEP_CHECK_DIR/bin/dependency-check.sh \
          --project "meu-projeto" \
          --scan "." \
          --format "HTML" \
          --out "reports/" \
          --nvdApiKey "$NVD_API_KEY" \
          --nvdApiDelay 2000 \
          --log "reports/dependency-check.log" \
          --debug || echo "Falha na análise de dependências, verificar logs."

  post_build:
    commands:
      - echo "Análise concluída! Salvando resultados..."
      - mkdir -p reports
      - ls -lah reports/
      - aws s3 cp reports/ s3://pipeline5-trabalho-d --recursive || echo "Nenhum relatório encontrado para upload."

artifacts:
  files:
    - '**/*'